{"version":3,"file":"storybook.81b58f25b41450f575ef.bundle.js","sources":["webpack:///./source/components/popover/popover-component.js"],"sourcesContent":["import React from 'react';\nimport CSSModules from 'react-css-modules';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { omit } from '../../helpers';\n\nimport styles from './popover.styl';\n\nclass Popover extends React.PureComponent {\n  static propTypes = {\n    onOpen: PropTypes.func,\n    onDismiss: PropTypes.func,\n    isOpen: PropTypes.bool,\n    actionComponent: PropTypes.node.isRequired,\n    position: PropTypes.oneOf(['bottomRight', 'bottomLeft', 'topRight', 'topLeft']),\n    className: PropTypes.string,\n  };\n  static defaultProps = {\n    onOpen: () => '',\n    onDismiss: () => '',\n    isOpen: false,\n    position: 'bottomRight',\n  };\n\n  constructor(props) {\n    super(props);\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    const { onDismiss, isOpen } = this.props;\n\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target) && isOpen) {\n      onDismiss();\n    }\n  }\n\n  render() {\n    const { children, actionComponent, isOpen, position, className, ...rest } = this.props;\n    return (\n      <div className={cx([styles.popoverContainer, className])} ref={this.setWrapperRef}>\n        {actionComponent}\n        {isOpen &&\n          <div\n            className={cx(styles.popover, {\n              [styles[position]]: position,\n            })}\n            {...omit(rest, ['onOpen', 'onDismiss'])}\n          >\n            {children}\n          </div>}\n      </div>\n    );\n  }\n}\n\nexport default CSSModules(Popover, styles);\n"],"mappings":"AAQA","sourceRoot":""}